{"version":"v2.14.2","commands":{"ipfs-connect":{"id":"ipfs-connect","description":"Connect to an IPFS peer","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"multiaddr":{"name":"multiaddr","type":"option","char":"m","description":"multiaddr to connect to an IPFS node"},"getDetails":{"name":"getDetails","type":"boolean","char":"d","description":"include details about the connection","allowNo":false}},"args":[]},"ipfs-download":{"id":"ipfs-download","description":"Download a file, given its CID.","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"cid":{"name":"cid","type":"option","char":"c","description":"CID of file to download"}},"args":[]},"ipfs-node":{"id":"ipfs-node","description":"Query the state of the IPFS node","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{},"args":[]},"ipfs-peers":{"id":"ipfs-peers","description":"Query the state of subnet peers","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"all":{"name":"all","type":"boolean","char":"a","description":"Display all data about peers","allowNo":false}},"args":[]},"ipfs-relays":{"id":"ipfs-relays","description":"Query the state of circuit relays","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{},"args":[]},"ipfs-status":{"id":"ipfs-status","description":"Query the state of the IPFS node","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{},"args":[]},"mc-collect-keys":{"id":"mc-collect-keys","description":"Collect Voting Addresses\n\nThis command is run to prepare for a governance vote. It looks up the addresses\nholding all NFTs tied to a common group token. This list of addresses can\nthen be used to air-drop voting tokens.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{},"args":[]},"mc-finish":{"id":"mc-finish","description":"Retrieve signatures, sign multisig TX, and broadcast\n\nThis command expects a JSON string containing an array of transaction IDs (TXIDs)\nthat contain e2ee messages containing signatures for the transaction generated\nby the mc-update-p2wdb-price command.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"},"txids":{"name":"txids","type":"option","char":"a","description":"Array of TXIDs of messages containing signatures"}},"args":[]},"mc-p2wdb-approval-tx":{"id":"mc-p2wdb-approval-tx","description":"Generate a multsig TX for the Minting Council to update the price of P2WDB writes.\n\nThis command creates a multisig wallet. As input, it takes address-public-key\npairs generated from the multisig-collect-keys command. It uses that\ndata to construct a P2SH multisig wallet. The wallet object is displayed\non the command line as the output.\n\nThis is a long-running command. It does the following:\n- It calls the mc-collect-keys commands to get the public keys for each holder of the Minting Council NFT.\n- It generates a multisignature wallet from those keys requiring 50% + 1 signers.\n- It generates a transaction for spending from the wallet, attaching an OP_RETURN to approve an update to the P2WDB write price.\n- It sends the unsigned transaction to each member of the Minting Council.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet paying to send messages to NFT holders"},"subject":{"name":"subject","type":"option","char":"s","description":"Subject of e2ee message."},"message":{"name":"message","type":"option","char":"m","description":"Message attached to transaction sent to each NFT holder."},"txid":{"name":"txid","type":"option","char":"t","description":"TXID of the update transaction generated from the mc-update-tx command."}},"args":[]},"mc-p2wdb-update-tx":{"id":"mc-p2wdb-update-tx","description":"Generate a PS009 Update Transaction to update the P2WDB write price\n\nThis command generates an 'Update Transaction' as per PS009 specification:\nhttps://github.com/Permissionless-Software-Foundation/specifications/blob/master/ps009-multisig-approval.md\n\nThis command creates a multisig wallet. As input, it takes address-public-key\npairs generated from the multisig-collect-keys command. It uses that\ndata to construct a P2SH multisig wallet. The wallet object is displayed\non the command line as the output.\n\nThis is a long-running command. It does the following:\n- It calls the mc-collect-keys commands to get the public keys for each holder\n  of the Minting Council NFT.\n- It generates a multisignature wallet from those keys requiring 50% + 1 signers.\n- It retrieves the current PSF token price and calculates the price of $0.01 USD\n  in PSF tokens.\n- It writes all the data to the P2WDB, pins the data with the P2WDB Pinning\n  Cluster, and gets an IPFS CID for the data.\n- It then writes a PS009 Update Transaction to the BCH blockchain, containing\n  the CID, returning a TXID.\n\nThat BCH TXID is then used as input to the mc-update-p2wdb-price command, to\ngenerate a PS009 Approval Transaction, so that the price update can be approved\nby the Minting Council via the multisignature wallet.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet paying to send messages to NFT holders"}},"args":[]},"mc-read-tx":{"id":"mc-read-tx","description":"Read multisig TX proposal\n\nThis command reads the 'message' section of a proposed multisig transaction for\nMinting Council members. This command should be run *before* the mc-sign-tx\ncommand.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"},"txid":{"name":"txid","type":"option","char":"t","description":"Transaction ID"}},"args":[]},"mc-sign-tx":{"id":"mc-sign-tx","description":"Read signed messages\n\nThis command signs a multisig transaction for Minting Council members. The\nmc-read-tx command should be run *before* this command, so that you can\nread the context of the transaction.\n\nAfter signing the transaction, it will send the signature back to the message\noriginator.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"},"txid":{"name":"txid","type":"option","char":"t","description":"Transaction ID"}},"args":[]},"msg-check":{"id":"msg-check","description":"Check signed messages","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"}},"args":[]},"msg-read":{"id":"msg-read","description":"Read signed messages","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"},"txid":{"name":"txid","type":"option","char":"t","description":"Transaction ID"}},"args":[]},"msg-send":{"id":"msg-send","description":"Send encrypted messages","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"bchAddress":{"name":"bchAddress","type":"option","char":"a","description":"BCH Address"},"message":{"name":"message","type":"option","char":"m","description":"Message to send"},"subject":{"name":"subject","type":"option","char":"s","description":"Message Subject"},"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"}},"args":[]},"msg-sign":{"id":"msg-sign","description":"Cryptographically sign a message.\n\nGenerate a signature from a clear-text message and the private key of your wallet.\nThe system verifying the signature will also need the BCH address of the walllet.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"},"msg":{"name":"msg","type":"option","char":"m","description":"Cleartext message to sign"}},"args":[]},"msg-verify":{"id":"msg-verify","description":"Verify a signed message\n\nVerify the authenticity of a signed message.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"bchAddr":{"name":"bchAddr","type":"option","char":"b","description":"BCH address of signer."},"msg":{"name":"msg","type":"option","char":"m","description":"Cleartext message used to generate the signature."},"sig":{"name":"sig","type":"option","char":"s","description":"Signature to verify."}},"args":[]},"p2wdb-json":{"id":"p2wdb-json","description":"Upload JSON to IPFS\n\nThis command uses the p2wdb npm library to upload a JSON object to an IPFS node.\nThe node returns a CID representing the JSON. That CID can then be pinned using\nthe P2WDB Pinning cluster, using the p2wdb-pin command.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"},"json":{"name":"json","type":"option","char":"j","description":"A JSON string. Encase this argument in single quotes."}},"args":[]},"p2wdb-pin":{"id":"p2wdb-pin","description":"Pin an IPFS CID using the P2WDB pinning service\n\nThis command uses the p2wdb npm library to pin an IPFS CID using the P2WDB\npinning service.\n\nNote: Currently only files 1MB or less are supported.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"},"cid":{"name":"cid","type":"option","char":"c","description":"IPFS CID to pin"}},"args":[]},"p2wdb-read":{"id":"p2wdb-read","description":"Read an entry from the P2WDB","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"hash":{"name":"hash","type":"option","char":"h","description":"Hash CID representing P2WDB entry"}},"args":[]},"p2wdb-write":{"id":"p2wdb-write","description":"Write an entry to the pay-to-write database (P2WDB)\n\nIn order to execute this command, the wallet must contain some BCH and some PSF\ntoken, in order to pay for the write to the P2WDB.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"},"data":{"name":"data","type":"option","char":"d","description":"String of data to write to the P2WDB"},"appId":{"name":"appId","type":"option","char":"a","description":"appId string to categorize data"}},"args":[]},"send-bch":{"id":"send-bch","description":"Send BCH","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"},"qty":{"name":"qty","type":"option","char":"q","description":"Quantity in BCH"},"sendAddr":{"name":"sendAddr","type":"option","char":"a","description":"Cash address to send to"}},"args":[]},"send-tokens":{"id":"send-tokens","description":"Send Tokens","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"},"tokenId":{"name":"tokenId","type":"option","char":"t","description":"Token ID"},"sendAddr":{"name":"sendAddr","type":"option","char":"a","description":"Cash or SimpleLedger address to send to"},"qty":{"name":"qty","type":"option","char":"q"}},"args":[]},"token-burn":{"id":"token-burn","description":"Burn a specific quantity of SLP tokens.","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"},"qty":{"name":"qty","type":"option","char":"q","description":"Quantity of tokens to burn. If quantity is 0, all tokens will be burned."},"tokenId":{"name":"tokenId","type":"option","char":"t","description":"tokenId of token to burn"}},"args":[]},"token-create-fungible":{"id":"token-create-fungible","description":"Create a new SLP Type1 fugible token.\n\nCreating a minting baton is optional. If a baton address is not specified, then the\nbaton is burned and makes the it a 'fixed supply' token.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"walletName":{"name":"walletName","type":"option","char":"n","description":"Name of wallet to pay for transaction"},"ticker":{"name":"ticker","type":"option","char":"t","description":"Ticker of the group"},"tokenName":{"name":"tokenName","type":"option","char":"m","description":"Name of token"},"decimals":{"name":"decimals","type":"option","char":"d","description":"Decimals used by the token"},"qty":{"name":"qty","type":"option","char":"q","description":"Quantity of tokens to create"},"url":{"name":"url","type":"option","char":"u","description":"(optional) Document URL of the group"},"hash":{"name":"hash","type":"option","char":"h","description":"(optional) Document hash of the group"},"baton":{"name":"baton","type":"boolean","char":"b","description":"(optional Boolean) create a minting baton","allowNo":false}},"args":[]},"token-create-group":{"id":"token-create-group","description":"Create a new SLP Group token.\n\nGroup tokens are used to generate NFTs. Read more about the relationship:\nhttps://github.com/Permissionless-Software-Foundation/bch-js-examples/tree/master/bch/applications/slp/nft\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"walletName":{"name":"walletName","type":"option","char":"n","description":"Name of wallet to pay for transaction"},"tokenName":{"name":"tokenName","type":"option","char":"m","description":"Name of token"},"ticker":{"name":"ticker","type":"option","char":"t","description":"Ticker of the group"},"qty":{"name":"qty","type":"option","char":"q","description":"(optional) Quantity of tokens to create. Defaults to 1"},"url":{"name":"url","type":"option","char":"u","description":"(optional) Document URL of the group"},"hash":{"name":"hash","type":"option","char":"h","description":"(optional) Document hash of the group"}},"args":[]},"token-create-nft":{"id":"token-create-nft","description":"Create a new SLP Group token.\n\nGroup tokens are used to generate NFTs. Read more about the relationship:\nhttps://github.com/Permissionless-Software-Foundation/bch-js-examples/tree/master/bch/applications/slp/nft\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"walletName":{"name":"walletName","type":"option","char":"n","description":"Name of wallet to pay for transaction"},"tokenName":{"name":"tokenName","type":"option","char":"m","description":"Name of token"},"ticker":{"name":"ticker","type":"option","char":"t","description":"Ticker of the group"},"url":{"name":"url","type":"option","char":"u","description":"(optional) Document URL of the group"},"hash":{"name":"hash","type":"option","char":"h","description":"(optional) Document hash of the group"},"tokenId":{"name":"tokenId","type":"option","char":"i","description":"Token ID of Group token to burn, to generate the NFT"}},"args":[]},"token-info":{"id":"token-info","description":"Get information on a token\n\nRetrieves the Genesis data for a token. If PS002 mutable and immutable data is\nattached to the token, it is retrieved from IPFS.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"tokenId":{"name":"tokenId","type":"option","char":"t","description":"The ID of the token to lookup"}},"args":[]},"token-mda-tx":{"id":"token-mda-tx","description":"Create TXID for token mutable data\n\nMDA is an acrynym for 'Mutable Data Address'\n\nThis command is used to generate a TXID for attaching mutable data to a token.\nGiven a BCH address, it generates a transaction to turn that address into\nthe controller of mutable data for a token. This generates a TXID which is\nused in the tokens 'documentHash' field when creating the token.\n\nPS002 specification for mutable data:\nhttps://github.com/Permissionless-Software-Foundation/specifications/blob/master/ps002-slp-mutable-data.md\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"walletName":{"name":"walletName","type":"option","char":"n","description":"Name of wallet to pay for transaction"},"mda":{"name":"mda","type":"option","char":"a","description":"Mutable data address"}},"args":[]},"token-mint":{"id":"token-mint","description":"Mint new Fungible (Type 1) or Group tokens\n\nIf the wallet contains a minting baton from creating a Fungible or Group token,\nthis command can be used to mint new tokens into existence.\n\nThe '-r' flag is optional. By default the minting baton will be sent back to the\norigionating wallet. A different address can be specified by the -r flag. Passing\na value of 'null' will burn the minting baton, removing the ability to mint\nnew tokens.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet to pay for transaction"},"qty":{"name":"qty","type":"option","char":"q","description":"Quantity of tokens to create"},"tokenId":{"name":"tokenId","type":"option","char":"t","description":"Token ID"},"receiver":{"name":"receiver","type":"option","char":"r","description":"(optional) Receiver of new baton. Defaults to same wallet. null burns baton."}},"args":[]},"token-tx-history":{"id":"token-tx-history","description":"Get transaction history for a token\n\nRetrieves the transaction history for a token. This is every transaction that\nhas involved the token. The data is more informative for an NFT than it is for\na fungible token.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"tokenId":{"name":"tokenId","type":"option","char":"t","description":"The ID of the token to lookup"}},"args":[]},"token-update":{"id":"token-update","description":"Update token mutable data.\n\nThis command is used to update the mutable data for a token.\n\nData updates are effected by writing a new\nCID to an OP_RETURN inside a transaction, published to the Mutable Data Address\n(MDA), as described in PS002.\n\nThe wallet used to pay for the transaction must control the MDA, otherwise the\nupdate will be ignored.\n\nTo use this command, you'll need a CID that resolves to the updated data.\nThe p2wdb-json command can be used for that.\n\nNew mutable data follows the PS002 spec by uploading JSON data to IPFS and\nthen including the CID in an OP_RETURN. The JSON data should also follow the\nschema in the PS007 specification:\n\nhttps://github.com/Permissionless-Software-Foundation/specifications/blob/master/ps002-slp-mutable-data.md\nhttps://github.com/Permissionless-Software-Foundation/specifications/blob/master/ps007-token-data-schema.md\n\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"},"cid":{"name":"cid","type":"option","char":"c","description":"A CID that resolves to the new mutable data JSON"}},"args":[]},"vote-addrs":{"id":"vote-addrs","description":"Collect Voting Addresses\n\nThis command is run to prepare for a governance vote. It looks up the addresses\nholding all NFTs tied to a common group token. This list of addresses can\nthen be used to air-drop voting tokens.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{},"args":[]},"vote-airdrop":{"id":"vote-airdrop","description":"Airdrop Voting Tokens\n\nThis command is used to air-drop voting tokens to an array of addresses. It\nis expected the array of addresses is generated from the vote-addrs command.\nOne token will be sent to each address in the list.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet holding voting tokens"},"addrs":{"name":"addrs","type":"option","char":"a","description":"JSON string containing array of addresses"},"tokenId":{"name":"tokenId","type":"option","char":"t","description":"Token ID to air-drop to each address"}},"args":[]},"wallet-addrs":{"id":"wallet-addrs","description":"List the different addresses for a wallet.","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"}},"args":[]},"wallet-balances":{"id":"wallet-balances","description":"Display the balances of the wallet","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"},"verbose":{"name":"verbose","type":"boolean","char":"v","description":"Show verbose UTXO information","allowNo":false}},"args":[]},"wallet-create":{"id":"wallet-create","description":"Generate a new HD Wallet.","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"},"description":{"name":"description","type":"option","char":"d","description":"Description of the wallet"}},"args":[]},"wallet-list":{"id":"wallet-list","description":"List existing wallets.","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{},"args":[]},"wallet-optimize":{"id":"wallet-optimize","description":"Optimize a wallet\n\nThis command 'optimizes' a wallet by consolidating the UTXOs with in it. This\nconsolidation can significantly reduce the number of API calls, which speeds\nup the the network calls and results in an improved user experience (UX).\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"}},"args":[]},"wallet-remove":{"id":"wallet-remove","description":"Remove an existing wallet.","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"Name of wallet"}},"args":[]},"wallet-scan":{"id":"wallet-scan","description":"Scan different derivation paths of a 12 word mnemonic for tx history.\n\nScans the first 20 addresses of each derivation path for\nhistory and balance of the given mnemonic. If any of them had a history, scans\nthe next 20, until it reaches a batch of 20 addresses with no history. The -m\nflag is used to pass it a mnemonic phrase. Be sure to enclose the words in\nquotes.\n\nThis command is handy for people who maintain multiple wallets. This allows easy\nscanning to see if a mnemonic holds any funds on any of the commonly used\nderivation paths.\n\nDerivation pathes used:\n145 - BIP44 standard path for Bitcoin Cash\n245 - BIP44 standard path for SLP tokens\n0 - Used by common software like the Bitcoin.com wallet and Honest.cash\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"mnemonic":{"name":"mnemonic","type":"option","char":"m","description":"mnemonic phrase to generate addresses, wrapped in quotes"}},"args":[]},"wallet-service-test":{"id":"wallet-service-test","description":"Run end-to-end tests on the selected wallet service.\n\nThis command will run a series of end-to-end (e2e) tests on a current global\nback end selected with the 'wallet-service' command. It will test that the\nselected service if fully function, and this app can adaquately communicate\nwith that service.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{},"args":[]},"wallet-service":{"id":"wallet-service","description":"List and/or select a wallet service provider.","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"select":{"name":"select","type":"option","char":"s","description":"Switch to a given IPFS ID for wallet service."}},"args":[]},"wallet-sweep":{"id":"wallet-sweep","description":"Sweep funds from one wallet into another\n\nSweep funds from a single private key (WIF) or a whole HD wallet (mnemonic)\ninto another wallet. Works for both BCH and tokens.\n\nIf the target wallet does not have enough funds to pay transaction fees, fees\nare paid from the receiving wallet. In the case of a mnemonic, a derivation path\ncan be specified.\n\nEither a WIF or a mnemonic must be specified.\n","pluginName":"psf-bch-wallet","pluginType":"core","aliases":[],"flags":{"name":{"name":"name","type":"option","char":"n","description":"name of receiving wallet"},"mnemonic":{"name":"mnemonic","type":"option","char":"m","description":"12-word mnemonic phrase, wrapped in quotes"},"wif":{"name":"wif","type":"option","char":"w","description":"WIF private key controlling funds of a single address"},"derivation":{"name":"derivation","type":"option","char":"d","description":"Derivation path. Will default to 245 if not specified. Common values are 245, 145, and 0"}},"args":[]}}}